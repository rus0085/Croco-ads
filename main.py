import sqlite3
from aiogram import types
from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import CallbackQuery
import random
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import secrets
from keyboards import markup_add_ad,hideboard,markup_otmena_advert,markup_oplata,markup_proverka_advert,markup_payout_trans,markup_webmaster_cabinet,markup_hide,markup_webmaster_menu,markup_otmena,markup_proverka,markup_menu,markup_webmaster_work,markup_payout_comlete, markup_hold,markup_advertiser_menu
import datetime
from prettytable import PrettyTable,MSWORD_FRIENDLY
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests


class FSMaddress_update_advert(StatesGroup):
    address_update_advert = State()

class FSMadd_podpiska(StatesGroup):
    add_podpiska = State()
    link = State()
    sum = State()

class FSMaddress(StatesGroup):
    address = State()

class FSMaddress_advert(StatesGroup):
    address_advert = State()

class FSMaddress_update(StatesGroup):
    address_update = State()

class FSMpayout(StatesGroup):
    payout = State()

token = '*****************'


bot = Bot(token)
dp = Dispatcher(bot, storage=MemoryStorage())
scheduler = AsyncIOScheduler()


@dp.message_handler(commands=["start"])
async def start(message):
    await bot.send_message(message.from_user.id, """–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã Croco ADS!

–í—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –≤–∏–¥–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ 0.5TONüíé.

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –≤ –Ω–∞—à–µ–π —Å–µ—Ç–∏:""", reply_markup=markup_menu)

@dp.message_handler(commands=["base"])
async def base(message):
    if message.from_user.id == 891705090 or message.from_user.id == 397448482:
        await bot.send_document(message.from_user.id,open("advertisers.db", "rb"))
        await bot.send_document(message.from_user.id, open("payouts.db", "rb"))
        await bot.send_document(message.from_user.id, open("transactions.db", "rb"))
        await bot.send_document(message.from_user.id, open("users_nft.db", "rb"))
        await bot.send_document(message.from_user.id, open("webmasters.db", "rb"))





@dp.message_handler(commands=["admin"])
async def admin_panel(message):
    if message.from_user.id == 891705090 or message.from_user.id == 397448482:
        await bot.send_message(message.from_user.id,
                               f"""–ö–æ–º–∞–Ω–¥—ã:

/payouts - –≤—Å–µ –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã

/approve 2022-08-18 16:04:25.525285   (–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã /payouts)

/podpiska - –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ



""", disable_web_page_preview=True,
                               reply_markup=markup_webmaster_cabinet)


@dp.message_handler(commands=["payouts"])
async def payouts_admin(message):
    if message.from_user.id == **** or message.from_user.id == *****:
        connector = sqlite3.connect('payouts.db')
        cursor = connector.cursor()
        cursor.execute("SELECT user_id,address,price,date FROM payouts where good = ? ", ("–í –ø—Ä–æ—Ü–µ—Å—Å–µ",))
        q = cursor.fetchall()

        th = ["User_id", "–ê–¥—Ä–µ—Å", "–°—É–º–º–∞", "–¥–∞—Ç–∞"]
        td = q
        columns = len(th)
        table = PrettyTable(th)
        td_data = td[:]
        for i in range(len(td)):
            table.add_row(td[i])

        if len(q) < 1:
            await bot.send_message(message.from_user.id, f"""–ë–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫""")
        else:
            await bot.send_message(message.from_user.id, f"""<pre>{table}</pre>""", parse_mode="html")


@dp.message_handler(commands=["approve"])
async def approve(message):
    if message.from_user.id == ****** or message.from_user.id == ******:
        try:
            date = message.text.split("/approve ")[1]
            connector = sqlite3.connect('payouts.db')
            cursor = connector.cursor()
            cursor.execute("UPDATE payouts SET good = ? , date_payout = ? WHERE date = ?", ("–í—ã–ø–ª–∞—á–µ–Ω–æ", datetime.datetime.now() ,date,))
            connector.commit()
            await payouts_admin(message)
        except:
            await bot.send_message(message.from_user.id, f"""–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã""")


@dp.message_handler(commands=["add_podpiska"])
async def approve(message):
    if message.from_user.id == ***** or message.from_user.id == *****:
        text = message.text.split("/add_podpiska ")[1]
        ad_id = text.split()[0]
        channel = text.split()[1]
        id_channel = text.split()[2]
        balance = text.split()[3]
        connector = sqlite3.connect('advertisers.db')
        cursor = connector.cursor()
        cursor.execute("INSERT INTO podpiska VALUES(?,?,?,?)", (ad_id,channel, id_channel, balance))
        connector.commit()
        await podpiska_admin(message)

@dp.message_handler(commands=["podpiska"])
async def podpiska_admin(message):
    if message.from_user.id == ******090 or message.from_user.id == ******:
        connector = sqlite3.connect('advertisers.db')
        cursor = connector.cursor()
        cursor.execute("Select * from podpiska")
        a = cursor.fetchall()

        th = ["ID", "–°—Å—ã–ª–∫–∞", "Id –∫–∞–Ω–∞–ª–∞", "–ë–∞–ª–∞–Ω—Å"]
        td = a
        columns = len(th)
        table = PrettyTable(th)
        td_data = td[:]
        for i in range(len(td)):
            table.add_row(td[i])

        await bot.send_message(message.from_user.id, f"""<pre>{table}</pre>""", parse_mode="html")

@dp.message_handler(content_types=['text'])
async def command(message):
        connector = sqlite3.connect('webmasters.db')
        cursor = connector.cursor()
        cursor.execute("Select holder,good from webmasters where user_id = ?", (message.from_user.id,))
        a = cursor.fetchone()

        if message.text == "–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å":
            await advertiser_def(message)

        if message.text == "–í–ª–∞–¥–µ–ª–µ—Ü NFT":
            await webmaster_def(message)



        if message.text == "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å":
            if a[0] == "1" or a[0] == "2" and a[1] == "1":
                await work(message)
            else:
                await bot.send_message(message.from_user.id,
                                   f"""–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü NFT""",
                                   disable_web_page_preview=True, reply_markup=markup_webmaster_menu)

        if message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                await bot.send_message(message.from_user.id,
                                   f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!
                                   
–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–≤–æ–¥—ã""", disable_web_page_preview=True, reply_markup=markup_webmaster_cabinet)

        if message.text == "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id,
                                   f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ª–∏–±–æ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å TON üíé.""",
                                   disable_web_page_preview=True, reply_markup=markup_webmaster_menu)
        if message.text == "–ë–∞–ª–∞–Ω—Å":
            await balance(message)

        if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫":
            await change_address(message)

        if message.text == "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
            await payout_trans(message)

        if message.text == "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤":
            await payout(message)

        if message.text == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª(—á–∞—Ç)" and (a[0] == "1" or a[0] == "2") and a[1] == "1":
            await podpiska(message)

        if message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏" and (a[0] == "1" or a[0] == "2") and a[1] == "1":
            await prosmotr_zapisi(message)

        if message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
            await bot.send_message(message.from_user.id,
                                   f"""–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è""", disable_web_page_preview=True,
                                   reply_markup=markup_add_ad)


        if message.text == "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
            await my_ads(message)
        if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await webmaster_def(message)

        if message.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏":
            await start(message)
        if message.text == "–ë–∞–ª–∞–Ω—Å ‚òéÔ∏è":
            await balance_advert(message)
        if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚òéÔ∏è":
            await advertiser_def(message)
        if message.text == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ":
            await add_ad_podpiska(message)



async def webmaster_def(message):
    connector = sqlite3.connect('webmasters.db')
    cursor = connector.cursor()
    cursor.execute("SELECT count(*) FROM webmasters where user_id = ? ",
                   (str(message.from_user.id),))
    q = cursor.fetchone()
    if q[0] < 1:
        cursor.execute("INSERT INTO webmasters VALUES(?,?,?,?,?)", (message.from_user.id, "0", "0","0","0"))
        connector.commit()

    connector = sqlite3.connect('webmasters.db')
    cursor = connector.cursor()
    cursor.execute("SELECT good FROM webmasters where user_id = ? ",
                   (str(message.from_user.id),))
    q = cursor.fetchone()
    if int(q[0]) == 0:
        cursor.execute("SELECT address FROM webmasters where user_id = ? ",
                       (str(message.from_user.id),))
        address = cursor.fetchone()
        if address[0] == "0":
            await bot.send_message(message.from_user.id,
                                   f"""–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–æ—à–µ–ª–µ–∫.

‚úÖ–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:    
                """, disable_web_page_preview=True, reply_markup=markup_otmena)
            await FSMaddress.address.set()
        else:
            await bot.send_message(message.from_user.id,
                                   f"""–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞ –Ω–∏–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ NFT, –∞ –≤—ã –∏–º–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ NFT.

        –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å—Å: {address[0]}    
                            """, disable_web_page_preview=True, reply_markup=markup_proverka)
    else:
        await bot.send_message(message.from_user.id, f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ª–∏–±–æ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å TON üíé.""", reply_markup=markup_webmaster_menu)




@dp.message_handler(state = FSMaddress.address)
async def verification(message,state: FSMContext):
        if message.text != "–û—Ç–º–µ–Ω–∞":
            connector = sqlite3.connect('webmasters.db')
            cursor = connector.cursor()
            cursor.execute("UPDATE webmasters SET address = ? WHERE user_id = ?", (message.text,message.from_user.id))
            connector.commit()
            await bot.send_message(message.from_user.id,f"""–û—Ç–ø—Ä–∞–≤—å—Ç–µ 0,01 TON –Ω–∞ –∞–¥—Ä–µ—Å—Å:
`*****************`

–ê –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'""", reply_markup= markup_proverka,parse_mode="MarkDown")
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, f"""–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ üôÖ‚ÄçÔ∏è""", reply_markup=markup_menu)
            await state.finish()




@dp.callback_query_handler(text="proverka")
async def proverka (message):
    connector2 = sqlite3.connect('webmasters.db')
    cursor2 = connector2.cursor()
    cursor2.execute("SELECT address FROM webmasters where user_id = ? ",
                   (str(message.from_user.id),))
    address = cursor2.fetchone()
    connector = sqlite3.connect('transactions.db')
    cursor = connector.cursor()
    cursor.execute("SELECT count(*) FROM transactions where address = ?", (str(address[0]),))
    q = cursor.fetchone()
    if q[0] > 0 :
        connector = sqlite3.connect('webmasters.db')
        cursor = connector.cursor()
        cursor.execute("UPDATE webmasters SET good = ? WHERE user_id = ?", ("1", message.from_user.id))
        connector.commit()
        await bot.delete_message(message.from_user.id, message.message.message_id)
        await bot.send_message(message.from_user.id, f"""‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º""", reply_markup=markup_webmaster_menu)
        headers = {
            '***********************36',
        }

        json_data = {
            '*******************
                'ownerAddress': f'{str(address[0])}',
                'first': 100,
            },
            'headers': {
                '****************** 'POST',
            },
        }
        try:
            response = requests.post('https://api.getgems.io/graphql', headers=headers, json=json_data)
            data1 = response.json()
            items = data1.get("data").get("nftItemsByOwner")
        except:
            1
        for i in range(100):
            try:
                nft_name_collections = items.get("items")[i].get("collection").get("name")
                if nft_name_collections == "Animals Red List" or nft_name_collections == "G-BOTS SD" or nft_name_collections == "Whales Club" or nft_name_collections == "Rich Cats" or nft_name_collections == "TON DOODLES" or nft_name_collections == "Toned Ape Club!" or nft_name_collections == "TON Punks üíé":
                    cursor2.execute("SELECT holder FROM webmasters where user_id = ? ",(str(message.from_user.id),))
                    holder = cursor2.fetchone()
                    if str(holder[0]) != "2":
                        cursor2.execute("Update webmasters set holder = 1 where user_id = ? ",(str(message.from_user.id),))
                        connector2.commit()
                        await bot.send_message(message.from_user.id, f"""–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü NFT –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –í—ã –∏–º–µ–µ—Ç–µ –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è!""", reply_markup=markup_webmaster_menu)
                        break
            except:
                1



    else:
        await bot.delete_message(message.from_user.id, message.message.message_id)
        await bot.send_message(message.from_user.id, f"""–ú—ã –Ω–µ –≤–∏–¥–∏–º –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞ –∫—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 0.2 TON.
–ö–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:

`E****************`""", reply_markup=markup_proverka,parse_mode="MarkDown", disable_web_page_preview=True)









@dp.callback_query_handler(text="update_address")
async def update_address (message):
    await bot.send_message(message.from_user.id,
                           f"""‚§µ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:    
        """, disable_web_page_preview=True, reply_markup=markup_otmena)
    await FSMaddress_update.address_update.set()




@dp.message_handler(state = FSMaddress_update.address_update)
async def verification(message,state: FSMContext):
        if message.text != "–û—Ç–º–µ–Ω–∞":
            connector = sqlite3.connect('webmasters.db')
            cursor = connector.cursor()
            cursor.execute("UPDATE webmasters SET address = ?, good = 0 WHERE user_id = ?", (message.text,message.from_user.id))
            connector.commit()
            await bot.send_message(message.from_user.id, f"""‚úÖ–í–∞—à –∫–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞ '–í–ª–∞–¥–µ–ª–µ—Ü NFT'""", reply_markup=markup_menu)
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, f"""üôÖ ‚Äç–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞""", reply_markup=markup_menu)
            await state.finish()




async def balance(message):
    connector = sqlite3.connect('webmasters.db')
    cursor = connector.cursor()
    cursor.execute("SELECT balance FROM webmasters where user_id = ?", (message.from_user.id,))
    balance = cursor.fetchone()

    connector2 = sqlite3.connect('advertisers.db')
    cursor2 = connector2.cursor()
    cursor2.execute("SELECT SUM(hold_price) FROM history where user_id = ? and hold_price > 0",
                   (message.from_user.id, ))
    hold_price = cursor2.fetchone()
    if len(hold_price) > 0 and hold_price[0] != None:
        await bot.send_message(message.from_user.id, f"""–í–∞—à –±–∞–ª–∞–Ω—Å:  {balance[0]} TON
–í —Ö–æ–ª–¥–µ: {hold_price[0]} TON""",
                               reply_markup=markup_hold)
    else:
        await bot.send_message(message.from_user.id, f"""–í–∞—à –±–∞–ª–∞–Ω—Å:  {balance[0]} TON""",
                               reply_markup=markup_hold)

async def change_address(message):
    await bot.send_message(message.from_user.id, f"""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å—Å –∫–æ—à–µ–ª—å–∫–∞:""",
                           reply_markup=markup_otmena)
    await FSMaddress_update.address_update.set()


async def payout_trans(message):
    connector = sqlite3.connect('payouts.db')
    cursor = connector.cursor()
    cursor.execute("SELECT date,price,good FROM payouts where user_id = ? and good = ? ORDER BY date DESC", (message.from_user.id,"–í –ø—Ä–æ—Ü–µ—Å—Å–µ",))
    payouts = cursor.fetchall()

    th = ["–î–∞—Ç–∞","–°—É–º–º–∞","–í—ã–ø–ª–∞—Ç–∞"]
    td = payouts
    columns = len(th)
    table = PrettyTable(th)
    td_data = td[:]
    for i in range(len(td)):
        table.add_row(td[i])

    if len(payouts)<1:
        await bot.send_message(message.from_user.id, f"""–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –≤—ã–ø–ª–∞—Ç—ã""",reply_markup=markup_webmaster_cabinet)
    else:
            await bot.send_message(message.from_user.id, f"""<pre>{table}</pre>""",parse_mode="html", reply_markup= markup_payout_comlete)


@dp.callback_query_handler(text="payout_complete")
async def payout_comlete(call: types.CallbackQuery):
    connector = sqlite3.connect('payouts.db')
    cursor = connector.cursor()
    cursor.execute("SELECT date,price,good FROM payouts where user_id = ? and good = ? ORDER BY date DESC",
                   (call.from_user.id, "–í—ã–ø–ª–∞—á–µ–Ω–æ",))
    payouts = cursor.fetchall()

    th = ["–î–∞—Ç–∞", "–°—É–º–º–∞", "–í—ã–ø–ª–∞—Ç–∞"]
    td = payouts
    columns = len(th)
    table = PrettyTable(th)
    td_data = td[:]
    for i in range(len(td)):
        table.add_row(td[i])
    await call.answer()
    if len(payouts) < 1:
        await bot.send_message(call.from_user.id, f"""–ù–∏ –æ–¥–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞""",
                               reply_markup=markup_webmaster_cabinet)
    else:
        await bot.send_message(call.from_user.id, f"""<pre>{table}</pre>""", parse_mode="html")



async def payout(message):
    connector = sqlite3.connect('webmasters.db')
    cursor = connector.cursor()
    cursor.execute("SELECT balance FROM webmasters where user_id = ?", (message.from_user.id,))
    balance = cursor.fetchone()
    await bot.send_message(message.from_user.id, f""" –í–∞—à –±–∞–ª–∞–Ω—Å {balance[0]}
    
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 15 TON
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:""",
                           reply_markup=markup_otmena)
    await FSMpayout.payout.set()


@dp.message_handler(state = FSMpayout.payout)
async def payout_def(message,state: FSMContext):
    if message.text != "–û—Ç–º–µ–Ω–∞":
        connector = sqlite3.connect('webmasters.db')
        cursor = connector.cursor()
        cursor.execute("SELECT balance FROM webmasters where user_id = ?", (message.from_user.id,))
        balance = cursor.fetchone()

        if float(message.text) > float(balance[0]):
            await bot.send_message(message.from_user.id, f"""–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É –±–æ–ª—å—à—É—é –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.""",
                               reply_markup=markup_webmaster_cabinet)
            await state.finish()
        elif float(message.text) <= 15:
            await bot.send_message(message.from_user.id, f"""–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.""",
                               reply_markup=markup_webmaster_cabinet)
            await state.finish()
        elif float(message.text) >= 0 and float(message.text) <= float(balance[0]):
            connector2 = sqlite3.connect('webmasters.db')
            cursor2 = connector2.cursor()
            cursor2.execute("SELECT address FROM webmasters where user_id = ? ",
                           (str(message.from_user.id),))
            address = cursor2.fetchone()

            cursor2.execute("UPDATE webmasters SET balance = ? WHERE user_id = ?",
                           (balance[0] - float(message.text), message.from_user.id))
            connector2.commit()

            connector = sqlite3.connect('payouts.db')
            cursor = connector.cursor()
            cursor.execute("INSERT INTO payouts VALUES(?,?,?,?,?,?)", (message.from_user.id, address[0], message.text,datetime.datetime.now(),"-", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"))
            connector.commit()
            await state.finish()
            await bot.send_message(message.from_user.id, f"""–í—ã–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—É–º–º—É : {message.text} TON

–°–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–≤–æ–¥–æ–º –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ: '–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥' """,
                                   reply_markup=markup_webmaster_cabinet)

        else:
            await bot.send_message(message.from_user.id, f"""–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.""",
                                   reply_markup=markup_webmaster_cabinet)
            await state.finish()
    else:
        await bot.send_message(message.from_user.id, f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–≤–æ–¥—ã.""",
                               reply_markup=markup_webmaster_cabinet)
        await state.finish()




async def work(message):
    await bot.send_message(message.from_user.id, f"""–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞""",
                           reply_markup=markup_webmaster_work)


async def podpiska(message):
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("SELECT podpiska.ad_id FROM podpiska where podpiska.balance > 0 and podpiska.ad_id not in (SELECT history.ad_id from history where history.user_id = ? and history.ad_type = ?)", (message.from_user.id, "–ü–æ–¥–ø–∏—Å–∫–∞",))
    unused_ad = cursor.fetchall()
    if len(unused_ad)> 0:
        a = random.randint(0,len(unused_ad)-1)
        cursor.execute("SELECT channel,id_channel FROM podpiska where ad_id = ?", (unused_ad[a][0],))
        channel = cursor.fetchone()
        markup_proverka_podpiski = types.InlineKeyboardMarkup()
        btn12 = types.InlineKeyboardButton(text='–ö–∞–Ω–∞–ª', url=channel[0])
        btn22 = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=f'podpiska_{channel[1]}_{unused_ad[a][0]}')
        btn23 = types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'propusk_{channel[1]}_{unused_ad[a][0]}')
        markup_proverka_podpiski.row(btn12, btn22)
        markup_proverka_podpiski.row(btn23)
        await bot.send_message(message.from_user.id, f"""ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è - {unused_ad[a][0]}
–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: """, reply_markup=markup_proverka_podpiski)

    else:
        await bot.send_message(message.from_user.id, f"""–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ!
–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ...""",reply_markup=markup_webmaster_work)



@dp.callback_query_handler(text_contains="propusk_")
async def update_address(call: types.CallbackQuery):
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("INSERT INTO history VALUES(?,?,?,?,?,?,?)", (
    call.from_user.id, call.data.split("_")[2], "–ü–æ–¥–ø–∏—Å–∫–∞", 0, datetime.datetime.now(),datetime.datetime.now() + datetime.timedelta(days=14), "1"))
    connector.commit()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.answer()


@dp.callback_query_handler(text_contains="podpiska_")
async def update_address(call: types.CallbackQuery):
    connector = sqlite3.connect('webmasters.db')
    cursor = connector.cursor()
    cursor.execute("SELECT holder FROM webmasters where user_id = ?", (call.from_user.id,))
    holder = cursor.fetchone()
    try:
        user_status = await bot.get_chat_member(call.data.split("_")[1], call.from_user.id)
    except:
        1
    else:
        if user_status['status'] != 'left':
            if holder[0] == "2":
                price = 0.17
            elif holder[0] == "1":
                price = 0.1
            await bot.delete_message(call.from_user.id, call.message.message_id)
            await bot.send_message(call.from_user.id, f"""–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {price} TON""",
                                   reply_markup=markup_webmaster_work)

            connector = sqlite3.connect('advertisers.db')
            cursor = connector.cursor()
            cursor.execute("INSERT INTO history VALUES(?,?,?,?,?,?,?)",(call.from_user.id,call.data.split("_")[2],"–ü–æ–¥–ø–∏—Å–∫–∞", price ,datetime.datetime.now(),datetime.datetime.now()+ datetime.timedelta(days=7),"1"))
            connector.commit()

            cursor.execute("UPDATE podpiska SET balance = (SELECT balance from podpiska where ad_id = ?) - ? WHERE ad_id = ?",(call.data.split("_")[2], 0.25 ,call.data.split("_")[2]))
            connector.commit()
            await call.answer()
        else:
            await bot.send_message(call.from_user.id, f"""–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å""",
                                   reply_markup=markup_webmaster_work)
            await call.answer()




@dp.callback_query_handler(text="proverka_hold")
async def proverka_hold(call: types.CallbackQuery):
    connector2 = sqlite3.connect('webmasters.db')
    cursor2 = connector2.cursor()
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("SELECT SUM(hold_price) FROM history where user_id = ? and hold < ? and hold_price > 0",(call.from_user.id, datetime.datetime.now(),))
    hold_price = cursor.fetchone()
    cursor.execute("SELECT ad_id, ad_type, hold_price FROM history where user_id = ? and hold > ? and hold_price > 0",
                   (call.from_user.id, datetime.datetime.now(),))
    hold_count = cursor.fetchall()
    th = ["ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è","–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è","–°—É–º–º–∞"]
    td = hold_count
    table = PrettyTable(th)
    td_data = td[:]
    for i in range(len(td)):
        table.add_row(td[i])


    await call.answer()
    if hold_price[0] != None:
        sum = 0
        unhold = []
        cursor.execute("SELECT ad_id,hold_price FROM history where user_id = ? and hold < ? and hold_price > 0 and ad_type = ?",
                       (call.from_user.id, datetime.datetime.now(),"–ü–æ–¥–ø–∏—Å–∫–∞"))
        hold_price_to_complete = cursor.fetchall()
        for i in range(len(hold_price_to_complete)):
            cursor.execute("SELECT id_channel FROM podpiska where ad_id = ?",
                (hold_price_to_complete[i][0],))
            id_channel = cursor.fetchone()
            try:
                user_status = await bot.get_chat_member(id_channel[0], call.from_user.id)
            except:
                1
            else:
                if user_status['status'] != 'left':
                    sum = hold_price_to_complete[i][1]
                    cursor.execute("UPDATE history SET hold_price = 0 where user_id = ? and ad_id = ?",
                                   (call.from_user.id, hold_price_to_complete[i][0],))
                    connector.commit()
                else:
                    cursor.execute("UPDATE history SET hold_price = 0 where user_id = ? and ad_id = ?",
                                   (call.from_user.id, hold_price_to_complete[i][0],))
                    unhold.append([hold_price_to_complete[i][0],"–û—Ç–ø–∏—Å–∫–∞"])

                    cursor.execute("UPDATE podpiska SET balance = (SELECT balance from podpiska where ad_id = ?) + ? where ad_id = ?",
                                   (hold_price_to_complete[i][0], hold_price_to_complete[i][1],hold_price_to_complete[i][0]))
                    connector.commit()



        cursor2.execute("UPDATE webmasters SET balance = (SELECT balance from webmasters where user_id = ?) + ? WHERE user_id = ?",(call.from_user.id, sum ,call.from_user.id))
        connector2.commit()

        tho = ["ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è","–ü—Ä–∏—á–∏–Ω–∞"]
        tdo = unhold
        tableo = PrettyTable(tho)
        for i in range(len(tdo)):
            tableo.add_row(tdo[i])

        if len(unhold) > 0 and sum > 0:
            await bot.send_message(call.from_user.id, f"""–î–µ–Ω—å–≥–∏ –∏–∑ —Ö–æ–ª–¥–∞ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å : {sum}
–ù–æ —Ç–∞–∫ –∂–µ –º—ã –∑–∞–º–µ—Ç–∏–ª–∏ —á—Ç–æ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç:

<pre>{tableo}</pre>

–î–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–µ—Ä–Ω—É–ª–∏—Å—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é""", reply_markup=markup_webmaster_cabinet, parse_mode="html")
        elif len(unhold) == 0 and sum > 0:
                await bot.send_message(call.from_user.id, f"""–î–µ–Ω—å–≥–∏ –∏–∑ —Ö–æ–ª–¥–∞ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å : {sum}""", reply_markup=markup_webmaster_cabinet)

        elif len(unhold) > 0 and sum == 0:
                await bot.send_message(call.from_user.id, f"""–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ —á—Ç–æ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç:

<pre>{tableo}</pre>

–î–µ–Ω—å–≥–∏ –∑–∞ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–µ—Ä–Ω—É–ª–∏—Å—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é""", reply_markup=markup_webmaster_cabinet, parse_mode="html")


    else:
        if len(hold_count) > 0:
            await bot.send_message(call.from_user.id, f"""–ñ–¥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
         
<pre>{table}</pre>""",
                                   reply_markup=markup_webmaster_cabinet,parse_mode="html")

        else:
            await bot.send_message(call.from_user.id, f"""–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ö–æ–ª–¥–∞""",
                                   reply_markup=markup_webmaster_cabinet)



async def prosmotr_zapisi(message):
    await bot.send_message(message.from_user.id, f"""–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ""",
                           reply_markup=markup_webmaster_cabinet)




################################################################


async def advertiser_def(message):
        connector = sqlite3.connect('advertisers.db')
        cursor = connector.cursor()
        cursor.execute("SELECT count(*) FROM advertisers where user_id = ? ",
                       (str(message.from_user.id),))
        q = cursor.fetchone()
        if q[0] < 1:
            cursor.execute("INSERT INTO advertisers VALUES(?,?,?,?,?)", (message.from_user.id, "0", "0", "0", "0"))
            connector.commit()

        connector = sqlite3.connect('advertisers.db')
        cursor = connector.cursor()
        cursor.execute("SELECT good FROM advertisers where user_id = ? ",
                       (str(message.from_user.id),))
        q = cursor.fetchone()
        if int(q[0]) == 0:
            cursor.execute("SELECT address FROM advertisers where user_id = ? ",
                           (str(message.from_user.id),))
            address = cursor.fetchone()
            if address[0] == "0":
                await bot.send_message(message.from_user.id,
                                       f"""–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–æ—à–µ–ª–µ–∫.

    ‚úÖ–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:    
                    """, disable_web_page_preview=True, reply_markup=markup_otmena)
                await FSMaddress_advert.address_advert.set()
            else:
                await bot.send_message(message.from_user.id,
                                       f"""–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–æ—à–µ–ª–µ–∫.

            –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å—Å: {address[0]}    
                                """, disable_web_page_preview=True, reply_markup=markup_proverka_advert)
        else:
            await bot.send_message(message.from_user.id, f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: 0.25 TONüíé –∑–∞ 1 –ø–æ–¥–ø–∏—Å–∫—É
–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 50 TONüíé""", reply_markup=markup_advertiser_menu)





@dp.message_handler(state = FSMaddress_advert.address_advert)
async def verification(message,state: FSMContext):
        if message.text != "–û—Ç–º–µ–Ω–∞":
            connector = sqlite3.connect('advertisers.db')
            cursor = connector.cursor()
            cursor.execute("UPDATE advertisers SET address = ? WHERE user_id = ?", (message.text,message.from_user.id))
            connector.commit()
            await bot.send_message(message.from_user.id,f"""–û—Ç–ø—Ä–∞–≤—å—Ç–µ 0,01 TON –Ω–∞ –∞–¥—Ä–µ—Å—Å:
`************************`

–ê –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'""", reply_markup= markup_proverka_advert,parse_mode="MarkDown")
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, f"""–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ üôÖ‚ÄçÔ∏è""", reply_markup=markup_menu)
            await state.finish()

async def balance_advert(message):
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("SELECT balance FROM advertisers where user_id = ? ",
                   (str(message.from_user.id),))
    q = cursor.fetchone()
    await bot.send_message(message.from_user.id, f"""–í–∞—à –±–∞–ª–∞–Ω—Å:  {q[0]} TON""", reply_markup=markup_oplata)

@dp.callback_query_handler(text="proverka_advert")
async def proverka_advert(message):
    connector2 = sqlite3.connect('advertisers.db')
    cursor2 = connector2.cursor()
    cursor2.execute("SELECT address FROM advertisers where user_id = ? ",
                   (str(message.from_user.id),))
    address = cursor2.fetchone()
    connector = sqlite3.connect('transactions.db')
    cursor = connector.cursor()
    cursor.execute("SELECT count(*) FROM transactions where address = ?", (str(address[0]),))
    q = cursor.fetchone()
    if q[0] > 0 :
        connector = sqlite3.connect('advertisers.db')
        cursor = connector.cursor()
        cursor.execute("UPDATE advertisers SET good = ? WHERE user_id = ?", ("1", message.from_user.id))
        connector.commit()
        await bot.delete_message(message.from_user.id, message.message.message_id)
        await bot.send_message(message.from_user.id, f"""‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º""", reply_markup=markup_advertiser_menu)

    else:
        await bot.delete_message(message.from_user.id, message.message.message_id)
        await bot.send_message(message.from_user.id, f"""–ú—ã –Ω–µ –≤–∏–¥–∏–º –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞ –∫—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 0.2 TON.
–ö–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:

`****************************`""", reply_markup=markup_proverka_advert,parse_mode="MarkDown", disable_web_page_preview=True)


@dp.message_handler(state = FSMaddress_update_advert.address_update_advert)
async def verification(message,state: FSMContext):
        if message.text != "–û—Ç–º–µ–Ω–∞":
            connector = sqlite3.connect('advertisers.db')
            cursor = connector.cursor()
            cursor.execute("UPDATE advertisers SET address = ?, good = 0 WHERE user_id = ?", (message.text,message.from_user.id))
            connector.commit()
            await bot.send_message(message.from_user.id, f"""‚úÖ–í–∞—à –∫–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞ '–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å'""", reply_markup=markup_menu)
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, f"""üôÖ ‚Äç–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞""", reply_markup=markup_menu)
            await state.finish()


@dp.callback_query_handler(text="update_address_advert")
async def update_address(message):
    await bot.send_message(message.from_user.id,
                           f"""‚§µ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:    
""", disable_web_page_preview=True, reply_markup=markup_otmena)
    await FSMaddress_update_advert.address_update_advert.set()




@dp.callback_query_handler(text="popolnit_balance")
async def popolnit_balance(message):
    comment = str(secrets.token_hex(8))
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("UPDATE advertisers SET last_trans = ? WHERE user_id = ?",
                   (comment, message.from_user.id))
    connector.commit()
    await bot.send_message(message.from_user.id,
                           f"""–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–æ—à–µ–ª—ë–∫:
                           
`*********************`

–î–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:

`{comment}`   

P.S. –µ—Å–ª–∏ –≤—ã –Ω–∞–∂–º–µ—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å" –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç–µ –ø–ª–∞—Ç—ë–∂, –¥–µ–Ω—å–≥–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç.
    """, disable_web_page_preview=True, reply_markup=markup_otmena_advert, parse_mode="MarkDown")


@dp.callback_query_handler(text="proverka_popoln")
async def proverka_popoln(call: CallbackQuery):
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    connector2 = sqlite3.connect('transactions.db')
    cursor2 = connector2.cursor()

    cursor.execute("Select last_trans,address from advertisers where user_id = ?",(call.from_user.id,))
    comment = cursor.fetchone()

    cursor2.execute("Select price from transactions where  comment = ? and address = ? ", (comment[0],comment[1],))
    price = cursor2.fetchone()
    if price != None  :
            cursor.execute(f"Update advertisers set balance = (Select balance from advertisers where user_id = ?) + {float(price[0])} where user_id = ?", (call.from_user.id,call.from_user.id))
            connector.commit()
            await bot.delete_message(call.from_user.id, call.message.message_id)
            await balance_advert(call)
    else:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, f"""–ú—ã –Ω–µ –≤–∏–¥–∏–º –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
–ö–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:  `************************`

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{comment[0]}`""", reply_markup=markup_otmena_advert, parse_mode="MarkDown",
                               disable_web_page_preview=True)

    await call.answer()

@dp.callback_query_handler(text="otmena_popoln")
async def proverka_popoln(call: CallbackQuery):
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute(f"Update advertisers set last_trans = 0 where user_id = ?", (call.from_user.id,))
    connector.commit()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,
                           f"""–£—Å–ø–µ—à–Ω–æ""", disable_web_page_preview=True, reply_markup=markup_advertiser_menu)
    await call.answer()


async def add_ad_podpiska(message):



    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    await bot.send_message(message.from_user.id,f"""–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (@crocoads_bot) –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.""", reply_markup=hideboard)
    await FSMadd_podpiska.add_podpiska.set()


@dp.message_handler(content_types=types.ContentType.ANY, state=FSMadd_podpiska.add_podpiska)
async def add_pod_def(message,state: FSMContext):
    try:
        await state.update_data(id = message["forward_from_chat"]["id"])
        await state.update_data(title=message["forward_from_chat"]["title"])

        await bot.send_message(message.from_user.id,
                               f"""–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª  (—Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/""",
                               reply_markup=hideboard)
        await FSMadd_podpiska.link.set()
    except:
        await bot.send_message(message.from_user.id,
                               f"""–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —ç—Ç–æ –Ω–µ –ø–æ—Å—Ç —Å –∫–∞–Ω–∞–ª–∞""",
                               reply_markup=markup_advertiser_menu)
        await state.finish()


@dp.message_handler(state=FSMadd_podpiska.link)
async def add_pod_def(message,state: FSMContext):
    await state.update_data(link = message.text)
    await bot.send_message(message.from_user.id, f"""–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ""", reply_markup=hideboard)
    await FSMadd_podpiska.sum.set()

@dp.message_handler(state=FSMadd_podpiska.sum)
async def add_pod_def(message,state: FSMContext):
    await state.update_data(sum = message.text)
    data = await state.get_data()
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("select balance from advertisers where user_id = ?",(message.from_user.id,))
    balance = cursor.fetchone()
    try:
        if float(data["sum"]) < float(balance[0]) and float(data["sum"]) > 0 :
            good = 1
        else:
            good = 0
            await bot.send_message(message.from_user.id,
                                   f"""–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –º–µ–Ω—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞({balance[0]})""",
                                   reply_markup=markup_advertiser_menu)
    except:
        await bot.send_message(message.from_user.id,
                               f"""–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –º–µ–Ω—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞({balance[0]})""",
                               reply_markup=markup_advertiser_menu)
    try:
        user_status = await bot.get_chat_member(data["id"], message.from_user.id)
        good2=1
    except:
        good2=0
        await bot.send_message(message.from_user.id,
                               f"""–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –≤—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.""",
                               reply_markup=markup_advertiser_menu)





    a = 5
    btn1 = types.InlineKeyboardButton(text="1",url=data["link"])
    try:
        a = str(data["link"]).find("https://t.me/")
        response = requests.get(data["link"])
        if response.text.split('<meta property="og:title" content="')[1].split('">')[0] != data["title"]:
            a = -1
            yes = 10/0
    except:
        await bot.send_message(message.from_user.id,
                               f"""–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç –∏ —Å—Å—ã–ª–∫–∞ —Å —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤""",
                               reply_markup=markup_advertiser_menu)
    if a == 0 and good == 1 and good2 == 1:

            cursor.execute("SELECT ad_id FROM podpiska ORDER BY ad_id DESC LIMIT 1")
            max_id = cursor.fetchone()


            cursor.execute("INSERT into podpiska VALUES(?,?,?,?,?)", (int(max_id[0])+1,data["link"],data["id"],data["sum"],message.from_user.id))
            connector.commit()
            price = data["sum"]
            cursor.execute(f"Update advertisers set balance = (Select balance from advertisers where user_id = ?) - {price} where user_id = ?",
                           (message.from_user.id,message.from_user.id))
            connector.commit()

            await bot.send_message(message.from_user.id,
                                   f"""–£—Å–ø–µ—à–Ω–æ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'""",
                                   reply_markup=markup_advertiser_menu)


    await state.finish()


async def my_ads(message):
    connector = sqlite3.connect('advertisers.db')
    cursor = connector.cursor()
    cursor.execute("select ad_id,channel,id_channel,balance from podpiska where user_id = ? and balance > 0", (message.from_user.id,))
    all_ads = cursor.fetchall()
    th = ["AD_ID", "CHANNEL", "ID_CHANNEL", "BALANCE"]
    td = all_ads
    columns = len(th)
    table = PrettyTable(th)
    td_data = td[:]
    for i in range(len(td)):
        table.add_row(td[i])
    await bot.send_message(message.from_user.id, f"""<pre>{table}</pre>""", parse_mode="html")

#####################################################################
@scheduler.scheduled_job('interval', seconds=10)
async def autocheck_holders():
    connector = sqlite3.connect('webmasters.db')
    cursor = connector.cursor()
    connector2 = sqlite3.connect('users_nft.db')
    cursor2 = connector2.cursor()
    cursor2.execute("SElect user_id from users_nft where nft > 0")
    nft_holders = cursor2.fetchall()
    cursor.execute("SElect user_id from webmasters")
    users_crocoads = cursor.fetchall()
    for i in range(len(nft_holders)):
        cursor.execute("Update webmasters set holder = 2 where user_id = ?",(nft_holders[i][0],))
        connector.commit()




scheduler.start()
executor.start_polling(dp,skip_updates=True)
